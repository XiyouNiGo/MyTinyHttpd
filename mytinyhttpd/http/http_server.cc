#include "mytinyhttpd/http/http_server.h"

#include <cstddef>
#include <fstream>
#include <nlohmann/json.hpp>
#include <string>

#include "mytinyhttpd/base/logging.h"
#include "mytinyhttpd/http/http_context.h"
#include "mytinyhttpd/http/http_request.h"
#include "mytinyhttpd/http/http_response.h"

using namespace nlohmann;

namespace mytinyhttpd {

namespace net {

// xiyoulinux group favicon
unsigned char favicon[] = {
    0x0,  0x0,  0x1,  0x0,  0x1,  0x0,  0x20, 0x20, 0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0xA8, 0xC,  0x0,  0x0,  0x16, 0x0,  0x0,  0x0,  0x28, 0x0,
    0x0,  0x0,  0x20, 0x0,  0x0,  0x0,  0x40, 0x0,  0x0,  0x0,  0x1,  0x0,
    0x18, 0x0,  0x0,  0x0,  0x0,  0x0,  0x80, 0xC,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,

    0x0,  0x0,  0xCD, 0xCD, 0xCD, 0x9F, 0x9F, 0x9F, 0x8D, 0x8D, 0x8D, 0x7B,
    0x7B, 0x7B, 0x79, 0x79, 0x79, 0x89, 0x89, 0x89, 0xA0, 0xA0, 0xA0, 0xCD,
    0xCD, 0xCD, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,

    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xD1, 0xD1, 0xD1,
    0x6D, 0x6D, 0x6D, 0x10, 0x10, 0x10, 0x6,  0x7,  0x7,  0x34, 0x35, 0x34,
    0x2,  0x3,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x8,  0x8,  0x8,  0x9,  0xA,  0x9,  0x13, 0x13, 0x13, 0x65, 0x65, 0x65,
    0xD1, 0xD1, 0xD1, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,

    0x0,  0x0,  0x0,  0xEC, 0xEC, 0xEC, 0x57, 0x57, 0x56, 0x12, 0x12, 0x12,
    0x0,  0x0,  0x0,  0x27, 0x27, 0x27, 0x49, 0x48, 0x48, 0x5A, 0x5A, 0x59,
    0x7C, 0x7B, 0x7B, 0x79, 0x7A, 0x7A, 0x9F, 0x9F, 0xA0, 0x94, 0x93, 0x94,
    0x77, 0x77, 0x77, 0x41, 0x41, 0x41, 0xA,  0x9,  0x9,  0x0,  0x0,  0x0,
    0x12, 0x12, 0x12, 0x4A, 0x4A, 0x4A, 0xED, 0xED, 0xED, 0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,

    0xA2, 0xA2, 0xA2, 0x1D, 0x1C, 0x1C, 0x0,  0x0,  0x0,  0x34, 0x34, 0x34,
    0x22, 0x22, 0x22, 0x3E, 0x3E, 0x3E, 0x51, 0x51, 0x51, 0x54, 0x54, 0x54,
    0x0,  0x0,  0x0,  0x1C, 0x1C, 0x1C, 0x6,  0x6,  0x6,  0x9,  0x9,  0x9,
    0x5A, 0x5A, 0x5A, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x76, 0x76, 0x76,
    0x36, 0x35, 0x35, 0x0,  0x0,  0x0,  0x20, 0x1F, 0x20, 0x94, 0x94, 0x94,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x74, 0x74, 0x74,
    0xD,  0xD,  0xD,  0x0,  0x0,  0x0,  0x46, 0x46, 0x46, 0x9E, 0x9F, 0x9F,
    0x16, 0x13, 0x12, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1B, 0x1B, 0x1A,
    0x6B, 0x6B, 0x6C, 0x85, 0x85, 0x85, 0x0,  0x0,  0x0,  0x22, 0x22, 0x22,
    0x64, 0x64, 0x64, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x77, 0x76, 0x76, 0x13, 0x13, 0x13,
    0x0,  0x0,  0x0,  0xB9, 0xB5, 0xB2, 0x52, 0x44, 0x40, 0x26, 0x15, 0x12,
    0x44, 0x42, 0x46, 0x48, 0x75, 0x90, 0x48, 0x6C, 0x84, 0x45, 0x3E, 0x3C,
    0x2A, 0x2B, 0x2A, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 0x3E, 0x3E,
    0x57, 0x72, 0x7D, 0x36, 0x80, 0xA6, 0x5B, 0x69, 0x73, 0x0,  0x0,  0x0,
    0x4,  0x2,  0x2,  0x4F, 0x4F, 0x4F, 0x13, 0x13, 0x13, 0x0,  0x0,  0x0,
    0x20, 0x20, 0x20, 0x64, 0x64, 0x64, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0xA5, 0xA5, 0xA5, 0xE,  0xE,  0xE,  0x0,  0x0,  0x0,
    0x7B, 0x75, 0x72, 0x6E, 0x96, 0xA6, 0x39, 0x91, 0xBA, 0x18, 0xA0, 0xD4,
    0x3,  0xAB, 0xE9, 0x5,  0xBE, 0xFE, 0x2,  0xA1, 0xDF, 0x9,  0x20, 0x2F,
    0x27, 0x23, 0x21, 0x26, 0x24, 0x20, 0x30, 0x2F, 0x28, 0x31, 0x26, 0x20,
    0x5,  0x6B, 0xA0, 0x8,  0xBE, 0xFF, 0x0,  0xB2, 0xEF, 0x5A, 0x90, 0xAA,
    0x24, 0xE,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xA8, 0xA7, 0xA8,
    0x0,  0x0,  0x0,  0x1D, 0x1D, 0x1D, 0x91, 0x91, 0x91, 0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x21, 0x21, 0x21, 0x0,  0x0,  0x0,  0x91, 0x92, 0x91,
    0x4B, 0x3A, 0x35, 0x2D, 0xA8, 0xDA, 0x1,  0xC3, 0xFF, 0x6,  0xBB, 0xFE,
    0x8,  0xBA, 0xFB, 0x6,  0xBA, 0xFB, 0x0,  0xB4, 0xF4, 0xA5, 0xA4, 0xA5,
    0xEC, 0xEA, 0xE9, 0xD5, 0xD5, 0xD5, 0x6F, 0x6F, 0x70, 0x0,  0x0,  0x0,
    0x7,  0x79, 0xA6, 0x8,  0xC1, 0xFF, 0x7,  0xBA, 0xF7, 0x0,  0xBF, 0xFF,
    0x28, 0xC4, 0xFD, 0x52, 0x73, 0x7F, 0x0,  0x0,  0x0,  0x4A, 0x49, 0x49,
    0x72, 0x72, 0x72, 0x2A, 0x2A, 0x2A, 0x1A, 0x1A, 0x1A, 0xED, 0xEE, 0xEE,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x5F, 0x5F, 0x5F, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x15, 0x15, 0x15,
    0x0,  0x0,  0x0,  0x44, 0x88, 0xA7, 0x4,  0xBE, 0xFF, 0x6,  0xB7, 0xF8,
    0xD,  0xBA, 0xF5, 0x9,  0xC9, 0xFF, 0x10, 0x55, 0x6B, 0xD5, 0xCC, 0xC7,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE4, 0xD9, 0xD3,
    0x3,  0x63, 0x8E, 0x9,  0xC3, 0xFF, 0x7,  0xBD, 0xFC, 0x5,  0xB8, 0xFA,
    0x0,  0xBD, 0xFE, 0x78, 0xCD, 0xEE, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x5D, 0x5D, 0x5E, 0x54, 0x54, 0x54, 0x6,  0x6,  0x6,  0x45, 0x44, 0x44,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xD2, 0xD2, 0xD2,
    0x16, 0x16, 0x15, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x3E, 0xA1, 0xC7, 0x0,  0xC3, 0xFF, 0x3,  0xB8, 0xF9,
    0x8,  0xBA, 0xFE, 0x11, 0xAC, 0xDF, 0x6,  0x0,  0x0,  0xD9, 0xDA, 0xDD,
    0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xFC, 0xFF, 0xFB, 0xF2,
    0x3F, 0xAA, 0xD7, 0x7,  0x9B, 0xD1, 0xE,  0x7A, 0xA6, 0x2,  0xC0, 0xFF,
    0x6B, 0xC5, 0xEB, 0x7A, 0x72, 0x52, 0x43, 0x43, 0x42, 0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x17, 0x18, 0x18,
    0xD2, 0xD2, 0xD2, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x76, 0x77, 0x77,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x7A, 0x86, 0x8E, 0x81, 0x81, 0x67, 0x19, 0xB6, 0xF3,
    0x0,  0xC0, 0xFF, 0xCD, 0xA7, 0x3A, 0xBB, 0x89, 0x2F, 0xD1, 0xD3, 0xCB,
    0xFF, 0xFF, 0xFF, 0xF9, 0xF9, 0xF9, 0xF8, 0xF8, 0xF8, 0xFF, 0xFF, 0xFD,
    0x40, 0xCD, 0xFD, 0x1,  0x38, 0x4C, 0x1,  0x0,  0x0,  0xB,  0x55, 0x6C,
    0x92, 0xBF, 0xC9, 0x75, 0x56, 0x1E, 0x8C, 0x7A, 0x53, 0xF,  0x12, 0x18,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x11, 0x11, 0x11,
    0x59, 0x59, 0x59, 0x0,  0x0,  0x0,  0xFF, 0xFF, 0xFF, 0x14, 0x14, 0x14,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x18, 0x19, 0x1D, 0x8D, 0x7C, 0x63, 0x9A, 0x70, 0x0,  0xA5, 0xA9, 0x3B,
    0xAA, 0x95, 0x3D, 0xE2, 0x91, 0x0,  0xD6, 0x9B, 0xF,  0xB1, 0xAE, 0xAE,
    0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 0xF9, 0xF9, 0xF9, 0xFD, 0xFB, 0xFB,
    0xFF, 0xFF, 0xFF, 0x39, 0x3D, 0x3E, 0x1,  0x1,  0x0,  0x1B, 0xD,  0xC,
    0x9C, 0x98, 0x84, 0x6D, 0x62, 0x40, 0x73, 0x50, 0x12, 0x6E, 0x6C, 0x64,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x17, 0x17, 0x17, 0x0,  0x0,  0x0,  0xCD, 0xCD, 0xCC, 0x13, 0x13, 0x13,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x62, 0x68, 0x6D, 0x86, 0x59, 0xC,  0xB8, 0x8C, 0x9,  0xBE, 0xAA, 0x2,
    0xA5, 0xB0, 0x4,  0xE2, 0x96, 0x0,  0x9B, 0x76, 0x1F, 0xFD, 0xFF, 0xFF,
    0xF7, 0xF7, 0xF8, 0xFA, 0xFA, 0xFA, 0xFB, 0xFA, 0xFB, 0xFB, 0xFB, 0xFB,
    0xFF, 0xFF, 0xFF, 0x50, 0x4F, 0x4F, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x99, 0x9F, 0x8B, 0x83, 0x7A, 0x53, 0x7E, 0x65, 0x32, 0x8B, 0x7A, 0x50,
    0xC,  0xC,  0x12, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x11, 0x12, 0x12, 0xD0, 0xD0, 0xD0, 0xAA, 0xAA, 0xAA, 0x2,  0x2,  0x2,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x76, 0x79, 0x79, 0x99, 0x95, 0x96, 0x98, 0x92, 0x18, 0xA7, 0xB2, 0x0,
    0xC9, 0x9E, 0x8,  0xA2, 0xB2, 0x0,  0xB8, 0xA9, 0xA4, 0xFD, 0xFF, 0xFF,
    0xFA, 0xFA, 0xFB, 0xF3, 0xF5, 0xF4, 0xE7, 0xEE, 0xE8, 0xF2, 0xF4, 0xF4,
    0xFF, 0xFF, 0xFF, 0x38, 0x39, 0x38, 0x4,  0x4,  0x5,  0x3,  0x7,  0xC,
    0x9E, 0x7D, 0x3F, 0x72, 0x53, 0xE,  0x82, 0x5F, 0x24, 0x82, 0x5F, 0x24,
    0x40, 0x41, 0x42, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x18, 0x18, 0x18, 0x9B, 0x9B, 0x9B, 0x9C, 0x9C, 0x9C, 0x0,  0x0,  0x0,
    0x30, 0x30, 0x30, 0x0,  0x0,  0x0,  0x31, 0x31, 0x31, 0x1,  0x0,  0x0,
    0x79, 0x9A, 0x97, 0x80, 0x89, 0x92, 0xF0, 0xF2, 0xF7, 0xA0, 0x86, 0x5A,
    0xB0, 0xAB, 0x0,  0xB3, 0x78, 0x10, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
    0xF5, 0xF8, 0xF6, 0xAA, 0xB9, 0xA1, 0x6B, 0x8B, 0x4E, 0xD0, 0xDC, 0xCC,
    0xFF, 0xFF, 0xFF, 0xF,  0xF,  0xF,  0x6,  0x6,  0x8,  0x48, 0x48, 0x43,
    0x81, 0x5E, 0x21, 0x7B, 0x5B, 0x22, 0x7B, 0x59, 0x21, 0x7C, 0x58, 0x14,
    0x56, 0x54, 0x4D, 0x1B, 0x1C, 0x1D, 0x6,  0x6,  0x6,  0x3C, 0x3C, 0x3C,
    0xB,  0xB,  0xB,  0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x0,  0x0,  0x0,
    0x16, 0x15, 0x15, 0xF4, 0xF4, 0xF4, 0x31, 0x31, 0x31, 0x6,  0x3,  0x2,
    0x6E, 0x91, 0x9B, 0x78, 0x92, 0x9B, 0x8C, 0x7E, 0x64, 0xDC, 0xD1, 0xAD,
    0xA9, 0x96, 0x83, 0x3C, 0x30, 0x12, 0xC3, 0xC5, 0xCA, 0xFF, 0xFF, 0xFF,
    0xE7, 0xEB, 0xE9, 0x94, 0xAA, 0x86, 0x41, 0x69, 0x23, 0x9F, 0xA9, 0x96,
    0x7E, 0x81, 0x7D, 0x4,  0x3,  0x4,  0x0,  0x0,  0x0,  0x89, 0x7E, 0x5D,
    0x77, 0x55, 0x12, 0x68, 0x4A, 0x16, 0x6A, 0x4B, 0x17, 0x79, 0x56, 0x1C,
    0x61, 0x5D, 0x4B, 0x0,  0x0,  0x0,  0xF7, 0xF7, 0xF7, 0x6D, 0x6D, 0x6D,
    0x0,  0x0,  0x0,  0x66, 0x66, 0x66, 0x7B, 0x7B, 0x7B, 0x0,  0x0,  0x0,
    0x62, 0x62, 0x63, 0xBD, 0xBD, 0xBD, 0x65, 0x65, 0x66, 0x11, 0xF,  0xC,
    0x80, 0x99, 0xAB, 0x68, 0x74, 0x72, 0xB4, 0xD6, 0xF3, 0x99, 0xA1, 0xA0,
    0x87, 0x56, 0x5,  0x4B, 0x4F, 0x55, 0x81, 0x80, 0x81, 0xFF, 0xFF, 0xFF,
    0xF8, 0xFC, 0xFA, 0xE3, 0xEA, 0xE2, 0xDD, 0xE4, 0xDB, 0xF6, 0xFD, 0xF7,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x5E, 0x5E, 0x54, 0x82, 0x5A, 0x24,
    0x75, 0x55, 0x1C, 0x6D, 0x4E, 0x1A, 0x68, 0x48, 0x18, 0x74, 0x4F, 0x18,
    0x59, 0x54, 0x45, 0x41, 0x40, 0x42, 0xAB, 0xAB, 0xAB, 0x56, 0x56, 0x56,
    0x20, 0x20, 0x20, 0x63, 0x63, 0x63, 0x9D, 0x9D, 0x9D, 0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x32, 0x32, 0x32, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0xB9, 0xCD, 0xE0, 0x85, 0x8A, 0x8E, 0xA0, 0xC2, 0xE9, 0xAF, 0xA3, 0x89,
    0x60, 0x72, 0x78, 0xA6, 0xD0, 0xE7, 0x28, 0x2B, 0x27, 0xFF, 0xFF, 0xFE,
    0xCA, 0xBA, 0xBC, 0xED, 0xE5, 0xE2, 0xFF, 0xFF, 0xFF, 0xD2, 0xD1, 0xD2,
    0x0,  0x0,  0x0,  0x2F, 0x2D, 0x2E, 0x8D, 0x72, 0x41, 0x5C, 0x44, 0xC,
    0x6A, 0x4B, 0x1A, 0x66, 0x47, 0x18, 0x6A, 0x49, 0x18, 0x6D, 0x48, 0x14,
    0x54, 0x55, 0x4E, 0x0,  0x0,  0x0,  0x26, 0x26, 0x26, 0x0,  0x0,  0x0,
    0xF,  0x10, 0x10, 0x7B, 0x7B, 0x7B, 0xAD, 0xAD, 0xAD, 0x2,  0x2,  0x2,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0xAB, 0xB5, 0xC0, 0x90, 0xA1, 0xAB, 0x97, 0xAF, 0xD0, 0x8E, 0x9E, 0xAC,
    0x60, 0x85, 0x9D, 0x73, 0xA0, 0xA8, 0x86, 0x93, 0x9A, 0x5B, 0x64, 0x6C,
    0x4,  0x85, 0xB9, 0x10, 0x78, 0xAB, 0xCB, 0xD3, 0xDB, 0x2A, 0x27, 0x23,
    0x20, 0x20, 0x22, 0x91, 0x8D, 0x7D, 0x5E, 0x61, 0x3F, 0x60, 0x51, 0x2B,
    0x55, 0x3D, 0xD,  0x59, 0x41, 0x12, 0x5C, 0x46, 0x15, 0x74, 0x54, 0x21,
    0x3B, 0x3C, 0x3E, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x16, 0x16, 0x16, 0x9A, 0x9A, 0x9A, 0xCF, 0xCF, 0xCF, 0x12, 0x12, 0x12,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x69, 0x6A, 0x69, 0xAF, 0xC6, 0xEC, 0x86, 0x9A, 0xA6, 0x8B, 0xB1, 0xC8,
    0x63, 0x72, 0x78, 0x80, 0xAB, 0xC7, 0x69, 0x72, 0x67, 0x0,  0x80, 0xBC,
    0xD,  0xD9, 0xFF, 0x1F, 0xD7, 0xFB, 0x0,  0xBA, 0xFC, 0x5,  0x3,  0x4,
    0x33, 0x32, 0x38, 0x7C, 0xA6, 0xA1, 0x53, 0x37, 0x9,  0x4E, 0x4C, 0x2C,
    0x52, 0x35, 0xC,  0x52, 0x3C, 0x13, 0x59, 0x3C, 0xA,  0x81, 0x72, 0x50,
    0x6,  0x7,  0xE,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x12, 0x12, 0x12, 0xCE, 0xCD, 0xCD, 0x0,  0x0,  0x0,  0x15, 0x15, 0x15,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x15, 0x12, 0x13, 0x9D, 0xA2, 0x98, 0x62, 0x5E, 0x42, 0x80, 0xAF, 0xBE,
    0x79, 0x7D, 0x7A, 0x86, 0x9C, 0xBC, 0x74, 0x7D, 0x8B, 0x4B, 0x51, 0x56,
    0x12, 0xA1, 0xD2, 0x29, 0x9A, 0xB7, 0x5E, 0x7E, 0x85, 0x8,  0x1,  0x1,
    0x48, 0x4A, 0x4B, 0x53, 0xA6, 0x93, 0x53, 0x65, 0x48, 0x50, 0x3C, 0x1A,
    0x49, 0x35, 0xF,  0x4B, 0x36, 0xC,  0x57, 0x41, 0xD,  0x67, 0x64, 0x5F,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x17, 0x17, 0x17, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x76, 0x77, 0x76,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x77, 0x72, 0x71, 0x5C, 0x63, 0x4A, 0x51, 0x4F, 0x29,
    0x46, 0x6E, 0x6A, 0x2C, 0x54, 0x3C, 0x51, 0x65, 0x5D, 0xA6, 0xA2, 0xA2,
    0x4B, 0x39, 0x35, 0x9D, 0x92, 0x8A, 0xB6, 0xB0, 0xAF, 0x0,  0x0,  0x0,
    0x47, 0x4F, 0x4E, 0x48, 0x76, 0x6A, 0x56, 0x4D, 0x2C, 0x4D, 0x38, 0x13,
    0x34, 0x2F, 0x11, 0x3D, 0x2B, 0xA,  0x77, 0x6B, 0x51, 0xA,  0xB,  0xF,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x11, 0x11, 0x11,
    0x58, 0x58, 0x58, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xD1, 0xD1, 0xD1,
    0x16, 0x15, 0x16, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x4D, 0x4E, 0x4D, 0x0,  0x0,  0x0,  0x85, 0x7E, 0x72, 0x5A, 0x95, 0x93,
    0x48, 0x71, 0x67, 0x2D, 0x6F, 0x4E, 0x4F, 0x6E, 0x63, 0xC,  0x8,  0xA,
    0x0,  0x0,  0x0,  0x1,  0x1,  0x1,  0x2E, 0x2E, 0x2E, 0x0,  0x0,  0x0,
    0x55, 0x61, 0x5F, 0x47, 0x6D, 0x5A, 0x57, 0x49, 0x1D, 0x45, 0x45, 0x31,
    0x36, 0x2F, 0xB,  0x5B, 0x54, 0x38, 0x3F, 0x3D, 0x3F, 0xB,  0xA,  0xB,
    0x4E, 0x4E, 0x4E, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x19, 0x19, 0x19,
    0xD2, 0xD2, 0xD2, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x60, 0x60, 0x60, 0x0,  0x0,  0x0,  0xB,  0xB,  0xA,  0x78, 0x78, 0x78,
    0x86, 0x85, 0x86, 0x44, 0x44, 0x44, 0x1,  0x0,  0x1,  0x7A, 0x86, 0x84,
    0x65, 0x6D, 0x59, 0x40, 0x5A, 0x43, 0x6F, 0x86, 0x7C, 0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x24, 0x25, 0x25, 0x0,  0x0,  0x0,
    0x66, 0x7B, 0x71, 0x31, 0x69, 0x52, 0x44, 0x6D, 0x55, 0x4D, 0x2F, 0x2,
    0x6B, 0x5F, 0x44, 0x43, 0x43, 0x46, 0x0,  0x0,  0x0,  0x95, 0x95, 0x96,
    0x57, 0x57, 0x57, 0x42, 0x42, 0x42, 0x8,  0x8,  0x8,  0x44, 0x44, 0x43,
    0xFF, 0xFF, 0xFF, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0xEB, 0xEB, 0xEB, 0x22, 0x22, 0x22, 0x0,  0x0,  0x0,  0x3C, 0x3C, 0x3C,
    0x37, 0x37, 0x37, 0x3A, 0x3B, 0x3B, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x68, 0x63, 0x60, 0x81, 0x7E, 0x64, 0x5F, 0x5D, 0x47, 0x6D, 0x67, 0x5A,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1A, 0x1B, 0x1A, 0xB2, 0xAB, 0xAA,
    0xB8, 0xAB, 0x9D, 0x8B, 0x88, 0x73, 0x53, 0x5B, 0x47, 0x7E, 0x7B, 0x69,
    0x2A, 0x28, 0x2C, 0x0,  0x0,  0x0,  0x54, 0x53, 0x53, 0x56, 0x55, 0x55,
    0x40, 0x41, 0x40, 0x0,  0x0,  0x0,  0x20, 0x20, 0x20, 0xED, 0xED, 0xED,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0xA3, 0xA3, 0xA3, 0x12, 0x11, 0x11, 0x0,  0x0,  0x0,
    0xA,  0xA,  0xA,  0x1,  0x1,  0x1,  0x5F, 0x5F, 0x5F, 0xE,  0xD,  0xD,
    0x0,  0x0,  0x0,  0x14, 0x16, 0x19, 0x65, 0x5E, 0x57, 0x7E, 0x76, 0x5C,
    0xC5, 0xBB, 0xAF, 0xE1, 0xDC, 0xDC, 0xFF, 0xFB, 0xFC, 0xF9, 0xF2, 0xF1,
    0xE5, 0xE1, 0xE4, 0x8C, 0x8D, 0x8F, 0x44, 0x4C, 0x4D, 0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x57, 0x57, 0x57, 0x56, 0x56, 0x56, 0x57, 0x57, 0x57,
    0x0,  0x0,  0x0,  0x25, 0x25, 0x25, 0x91, 0x90, 0x90, 0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7B, 0x7B, 0x7B, 0xD,  0xD,  0xD,
    0x0,  0x0,  0x0,  0x4F, 0x4F, 0x4F, 0x65, 0x65, 0x65, 0x50, 0x4F, 0x4F,
    0x6B, 0x6C, 0x6C, 0x25, 0x24, 0x25, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x19, 0x19, 0x1B, 0x27, 0x27, 0x28, 0x2A, 0x2B, 0x2B, 0x24, 0x25, 0x26,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x49, 0x49, 0x4A,
    0x6E, 0x6D, 0x6E, 0x6A, 0x6A, 0x6A, 0x72, 0x71, 0x71, 0x0,  0x0,  0x0,
    0x21, 0x21, 0x21, 0x63, 0x63, 0x63, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x78, 0x78, 0x78,
    0x13, 0x13, 0x13, 0x0,  0x0,  0x0,  0x14, 0x14, 0x14, 0x41, 0x41, 0x41,
    0x7C, 0x7C, 0x7C, 0x5E, 0x5E, 0x5E, 0x38, 0x38, 0x38, 0x41, 0x41, 0x41,
    0x37, 0x38, 0x37, 0x14, 0x14, 0x14, 0x0,  0x0,  0x0,  0x23, 0x23, 0x23,
    0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x0,  0x0,  0x0,  0x4D, 0x4D, 0x4D,
    0x42, 0x42, 0x41, 0x31, 0x32, 0x32, 0x0,  0x0,  0x0,  0x26, 0x25, 0x25,
    0x63, 0x63, 0x63, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,

    0xA3, 0xA2, 0xA2, 0x1E, 0x1F, 0x1F, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x2B, 0x2B, 0x2B, 0x0,  0x0,  0x0,  0x60, 0x5F, 0x60,
    0xC,  0xC,  0xC,  0x9E, 0x9E, 0x9E, 0x45, 0x45, 0x44, 0x58, 0x58, 0x58,
    0x5A, 0x5A, 0x5A, 0xB3, 0xB3, 0xB3, 0x0,  0x0,  0x0,  0x47, 0x47, 0x47,
    0x57, 0x56, 0x56, 0x5,  0x6,  0x6,  0x20, 0x20, 0x20, 0x93, 0x93, 0x93,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,

    0x0,  0x0,  0x0,  0xED, 0xED, 0xED, 0x5B, 0x5B, 0x5B, 0x17, 0x16, 0x17,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x1,  0x1,  0x21, 0x21, 0x21,
    0x1F, 0x1F, 0x1F, 0x34, 0x34, 0x34, 0x42, 0x42, 0x42, 0x10, 0x11, 0x11,
    0xC,  0xC,  0xC,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x10, 0x10, 0x10, 0x4B, 0x4B, 0x4B, 0xF1, 0xF1, 0xF1, 0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,

    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xD1, 0xD1, 0xD1,
    0x6F, 0x6F, 0x6F, 0x14, 0x14, 0x14, 0x12, 0x11, 0x12, 0xF,  0xE,  0xF,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x10, 0x10, 0x10, 0x12, 0x12, 0x12, 0x16, 0x16, 0x16, 0x63, 0x63, 0x63,
    0xD1, 0xD1, 0xD1, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,

    0x0,  0x0,  0xCF, 0xCF, 0xCF, 0xA2, 0xA2, 0xA2, 0x8E, 0x8E, 0x8E, 0x7C,
    0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x8A, 0x8A, 0x8A, 0xA0, 0xA0, 0xA0, 0xD0,
    0xD0, 0xD0, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0xFF, 0xF0, 0xF,  0xFF, 0xFF, 0x80, 0x1,  0xFF, 0xFE, 0x0,
    0x0,  0x7F, 0xFC, 0x0,  0x0,  0x3F, 0xF8, 0x0,  0x0,  0x1F, 0xF0, 0x0,
    0x0,  0xF,  0xE0, 0x0,  0x0,  0x7,  0xE0, 0x0,  0x0,  0x3,  0xC0, 0x0,
    0x0,  0x3,  0x80, 0x0,  0x0,  0x1,  0x80, 0x0,  0x0,  0x1,  0x0,  0x0,
    0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80, 0x0,
    0x0,  0x1,  0x80, 0x0,  0x0,  0x1,  0x80, 0x0,  0x0,  0x1,  0xC0, 0x0,
    0x0,  0x1,  0xC0, 0x0,  0x0,  0x3,  0xE0, 0x0,  0x0,  0x7,  0xF0, 0x0,
    0x0,  0xF,  0xF8, 0x0,  0x0,  0x1F, 0xFC, 0x0,  0x0,  0x3F, 0xFE, 0x0,
    0x0,  0x7F, 0xFF, 0x80, 0x1,  0xFF, 0xFF, 0xF0, 0xF,  0xFF,
};

void HttpServer::DefaultHttpCallback(const HttpRequest& req,
                                     HttpResponse* resp) {
  if (req.method() == HttpRequest::kGet) {
    std::string real_path;
    if (req.path().empty()) {
      real_path = config_.docroot() + "index.html";
    } else {
      real_path = config_.docroot() + req.path();
    }
    std::ifstream real_file(real_path);
    if (real_file) {
      resp->AppendStatusLine(HttpResponse::k200Ok, "OK");
      resp->AppendContentType(GetMimeType(real_path));
      resp->AppendCloseConnection();
      resp->AppendBody(real_file);
    } else {
      resp->AppendStatusLine(HttpResponse::k404NotFound, "Not Found");
      resp->AppendCloseConnection(true);
      resp->AppendHeadersEnd();
    }
    // } else if (req.method() == HttpRequest::kPost) {
    // } else if (req.method() == HttpRequest::kHead) {
    // } else if (req.method() == HttpRequest::kPut) {
    // } else if (req.method() == HttpRequest::kDelete) {
    // } else if (req.method() == HttpRequest::kTrack) {
    // } else if (req.method() == HttpRequest::kOptions) {
  } else {
    resp->AppendStatusLine(HttpResponse::k404NotFound, "Not Found");
    resp->AppendCloseConnection(true);
    resp->AppendHeadersEnd();
  }
}

HttpServerConfig::HttpServerConfig(Slice filename) : is_valid(false) {
  std::ifstream config_file(filename.data());
  if (config_file) {
    try {
      json config_json;
      config_file >> config_json;
      assert(config_json.is_object());
      LOG_WARN << "HttpServerConfig: " << config_json.dump();
      if (config_json.contains("domain")) {
        domain_ = config_json["domain"];
      }
      if (config_json.contains("docroot")) {
        docroot_ = config_json["docroot"];
      }
      is_valid = true;
    } catch (...) {
      LOG_FATAL << "HttpServerConfig file parse error";
    }
  }
}

HttpServer::HttpServer(EventLoop* loop, const InetAddress& listen_addr,
                       const std::string& name, TcpServer::Option option,
                       Slice filename)
    : server_(loop, listen_addr, name, option),
      config_(filename),
      http_callback_() {
  server_.SetConnectionCallback(std::bind(&HttpServer::OnConnection, this, _1));
  server_.SetMessageCallback(
      std::bind(&HttpServer::OnMessage, this, _1, _2, _3));
}

void HttpServer::Start() {
  LOG_WARN << "HttpServer[" << server_.name() << "] starts listening on "
           << server_.ip_port();
  server_.Start();
}

void HttpServer::OnConnection(const TcpConnectionPtr& conn) {
  if (conn->IsConnected()) {
    conn->SetContext(HttpContext());
  }
}

void HttpServer::OnMessage(const TcpConnectionPtr& conn, Buffer* buf,
                           Timestamp receive_time) {
  HttpContext* context = AnyCast<HttpContext>(conn->mutable_context());

  if (!context->ParseRequest(buf, receive_time)) {
    conn->Send("HTTP/1.1 400 Bad Request\r\n\r\n");
    conn->Shutdown();
  }

  if (context->IsGotAll()) {
    OnRequest(conn, context->request());
    context->Reset();
  }
}

void HttpServer::OnRequest(const TcpConnectionPtr& conn,
                           const HttpRequest& req) {
  Slice connection = req.GetHeader("Connection");
  bool close =
      connection == "close" ||
      (req.version() == HttpRequest::kHttp10 && connection != "Keep-Alive");
  HttpResponse response(close);
  if (http_callback_) {
    http_callback_(req, &response);
  } else {
    DefaultHttpCallback(req, &response);
  }
  conn->Send(&response.buffer());
  if (response.IsCloseConnection()) {
    conn->Shutdown();
  }
}

const char* HttpServer::GetMimeType(const std::string& real_path) {
  static std::unordered_map<std::string, const char*> mime_type_map_ = {
      {".pdf", "application/pdf"},
      {".html", "text/html; charset=utf-8"},
      {".htm", "text/html; charset=utf-8"},
      {".jpg", "image/jpeg"},
      {".jpeg", "image/jpeg"},
      {".gif", "image/gif"},
      {".png", "image/png"},
      {".ico", "image/x-icon"},
      {".css", "text/css"},
      {".au", "audio/basic"},
      {".wav", "audio/wav"},
      {".avi", "video/x-msvideo"},
      {".mov", "video/quicktime"},
      {".qt", "video/quicktime"},
      {".mpeg", "video/mpeg"},
      {".mpe", "video/mpeg"},
      {".vrml", "model/vrml"},
      {".wrl", "model/vrml"},
      {".midi", "audio/midi"},
      {".mid", "audio/midi"},
      {".mp3", "audio/mpeg"},
      {".mp4", "audio/mp4"},
      {".ogg", "application/ogg"},
      {".pac", "application/x-ns-proxy-autoconfig"}};

  size_t dot = real_path.find_last_of('.');
  if (dot == std::string::npos) {
    return "application/octet-stream";  // default MIME type
  }
  const char* type = mime_type_map_[real_path.substr(dot)];
  if (type == nullptr) {
    return "application/octet-stream";  // default MIME type
  }
  return type;
}

}  // namespace net

}  // namespace mytinyhttpd